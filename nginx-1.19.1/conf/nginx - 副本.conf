#user  nobody;

#指定nginx进程数
worker_processes  1;
worker_rlimit_nofile 65535;

#全局错误日志及PID文件
error_log  logs/g_error.log;
error_log  logs/g_error.log  notice;
error_log  logs/g_error.log  info;

pid        logs/nginx.pid;


events {
    #连接数上限
    worker_connections  1024;
}


http {
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 50m;

    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"' '"$upstream_addr"' '"$upstream_response_time"';





    log_format  porxy  '$http_x_forwarded_for - $remote_user  [$time_local]  '
                             ' "$request"  $status $body_bytes_sent '
                             ' "$http_referer"  "$http_user_agent" ';


    #使用哪种格式的日志
     access_log logs/host.access.log  main;
     error_log  logs/error.log error;

    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #开启gzip压缩 ，压缩html
    #gzip  on;

    #设定负载均衡的服务器列表 支持多组的负载均衡,可以配置多个upstream  来服务于不同的Server.
 
    #nginx 的 upstream 支持 几 种方式的分配
 
    #1)、轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。

    #2)、weight 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 跟上面样，指定了权重。
 
    #3)、ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
 
    #4)、fair      
 
    #5)、url_hash #Urlhash

   
# 金米
upstream kingmi-back{
# 服务器后台
    server kingmi.staging.crdsjzx.com weight=1 max_fails=0 fail_timeout=6s; 
}


server {
        listen       8300;
        server_name  localhost:8888;
        root         html;

        # 后台的配置
        location /api {
            # add_header Access-Control-Allow-Origin *;
            proxy_set_header Host  localhost:8555;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off;

            #   staging环境     修改配置

            proxy_pass http://kingmi-back/api;


            proxy_set_header Cookie $http_cookie;
        }

        #   前端的配置
        location / {
            add_header Access-Control-Allow-Origin *;
            proxy_set_header Host  localhost:8555;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off;

             #   前端的配置  IP + 端口
            proxy_pass http://127.0.0.1:8888;
            proxy_set_header Cookie $http_cookie;
        }
    }

}